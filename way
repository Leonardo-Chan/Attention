toc的话可以结合链路讲一下，比如调用这个rpc服务的时候做了哪些考量，做技术方案的时候有没有观察过这个rpc接口的指标（耗时，错误率等等）同步调的还是异步调的，在你的链路中如果这个rpc调用失败了，或者服务宕机了，在你这侧做了哪些处理，这个rpc接入的时候配置的超时时间是多少，为什么（结合链路整体耗时和接口容忍度来讲）。


为什么这么设计，然后一般来说会有一些数据一致性的要求，也想想为什么要这么设计。 不论toc还是tob，能讲清楚自己负责的业务，为什么技术方案要这么设计，出了问题怎么兜底

toc的话还可以讲讲服务上线后的观察，比如接口调用量是否符合预期，有没有做熔断、限流等等考量，出了问题怎么快速定位（是cpu飙高了，还是内存异常上升了等等）

1.我们这个部门是干什么的？它提供什么服务？
2.我负责的这个模块是干什么的？我们的上下游是谁？
3.我们这个模块的业务架构是什么？技术架构是什么？
4.我在这一过程中做了哪些事情？


你们用DDD了？那你了解你们这个项目是怎么拆分各个领域的吗？这是不是一个难点？你能否结合你们的真实项目讲解一下你对DDD的理解？
你调RPC捞下游的数据了？那你有没有考虑过如果两个接口流量差距过大怎么办？比如A接口调了B RPC接口，那如果A的QPS是10000，BPRC的接口最大承载能力只有1000，那么A这个高的流量是不是就会给下游B接口打崩溃了？
限流怎么做？除了限流之外你还知道其他的方式吗？如果你调用的是操作接口，那像这种调用RPC的，你有了解过如何确保幂等性操作吗？
慢查询优化也很难啊，虽然你只是简单的加了个索引。但是面试本来就是一个讲故事的过程。这个慢查询造成了什么问题？在业务端造成了什么影响？你们是怎么定位到这个慢查询的？加索引这个措施是怎么制定出来的？除了这个之外你们还有没有想过其他的方案？
既然已经有过实习了，就不要只谈技术。大厂里面大多数部门的技术都是为了业务服务的。所以要展示自己在这段实习中对于自己所在组的业务的理解。
在这个过程中什么是闪光点？你能够顺溜的把一个故事讲完，并且展现出自己对业务的理解。这就已经超过90%的实习生了。


这个需求我应该怎么做才能有亮点能够让我汇报，这样才不至于最后总结资料发现全都是简单的增删改查

第一部分介绍自己的背景，包括mt/ld、所在团队、学校、实习经历，如果是研究生，可以加上自己的科研成果。
第二部分则应该是总起，讲述自己在这一段时间内，负责过哪些业务模块，分模块介绍自己的大致工作。
第三部分就是分模块仔细汇报工作了，模块下以需求为单位进行汇报，这也是整个文档最能体现你含金量的部分。
最后一部分就是未来展望，至少应该从业务、技术和团队三个方面去讲述，其他的自由新增。
上面的部分应当是必备的，其他的可以自由增加，比如可以加上自己在这段时间学到的业务知识和技术知识，也可以加上自己对团队和部门协作的认识等。


简单的东西不一定没有亮点。比如在一个需求中，你发现了有可以复用的模块可以很好的解决眼前的问题，你就接入了这个模块，问题就解决了需求也做完了。你觉得这很简单，没什么可以说的。但是真的没什么可以说吗？你要知道，其实不是这个可复用的模块解决了你的问题，而是你需要一个工具来解决问题，在你的研究和分析过程中，发现了这个可以复用的模块，这个模块刚好满足你的所有需求，并且能带来一些优势，然后你使用了它，并解决了问题。从这个角度看，你的工作似乎并不是毫无亮点。你的思考方式和解决问题的思路才是最大的亮点。

比如在一个简单的需求中你写出了横向扩展性强、兼容其他业务的代码，完全可以画一张不同业务接入这个接口的链路图，对比普通版本，直观的体现你的工作亮点；再比如系统新增了小程序端，虽然你只在代码里加了几行判断，你依旧可以配一张不同平台来源的请求进入系统后的不同处理流程的流程图，马上就会高大上很多，这就是合理配图的魅力！

何和别人打交道以及团队合作。这个需要有项目支撑，可以留意自己在团队合作中的角色，然后总结项目如何一步一步推进，面试的时候也很喜欢问团队合作的内容，这样在回答的时候就可以言之有物。

主动认领跨部门协作任务 ：像不同部门间有个产品推广方案的填表和汇总工作，你积极去负责，这过程中能接触不同部门人员，还能让自己的工作被更多人知晓。 

过程数据化 ：比如收集到 20 条用户反馈，把它转化成 “Top5 问题影响用户占比模型”，用直观的数据展示问题重点； 用 Axure 画原型图时标注版本迭代对比，让人一眼看出工作量； 把会议纪要升级为 “决策树图谱”，用流程图展示讨论逻辑链，让内容更清晰易懂。 定期埋钩子 ：每周五下班前给 mentor 发 “本周期待确认事项清单”，提醒他你的工作和贡献； 在所有文档页眉插入个人水印 logo，增加辨识度； 用 teambition 建立个人工作看板，邀请 mentor 成为观察者，让他随时了解你的工作进展。 借势打法 ：在周报里写 “配合 XX 总监推进战略项目”，哪怕实际只是帮忙查了个数据，也能提升自己在项目中的存在感； 把 mentor 说过的话重新组合成 “用户增长方法论 1.0” 发知识库，彰显自己的学习和总结能力； 抢注关键会议的第一分钟发言权，比如 “关于刚才讨论的点，我补充三点底层逻辑”，让大家一开始就关注到你。 核心核心核心 永远让 mentor 的 KPI 先完成 ：你的工作成果最好能成为 mentor 季度汇报的亮点，这样他对你的印象会更好，也会更愿意帮你； 重要结论一定要甩锅给数据，比如 “根据埋点显示”，比 “我认为” 更有说服力和安全性；保留所有工作留痕，像聊天记录定期导出，重要决策邮件抄送自己，以防万一出现纠纷有据可依。

1.搞懂自己组内的业务： 你所在的组负责的项目一定是为了解决一个具体的业务问题，对于大公司来说，你负责的项目可能是一整个大的架构中的其中一环。因此多翻一翻关于这个项目的立项书以及各种相关资料。在职期间一定要对下面几个问题够清晰：
1.你们组的业务是什么
2.你在实习期间参与的项目是为了解决什么问题的？
3.从技术角度上讲，他是如何解决这个问题的？
在此基础上，偷看自己组内其他实习生和正式员工的周报。看看你们组的人有没有干啥你比较感兴趣的活，直接偷就好了。有不懂的直接写周报上问，这样还能在ld面前刷个脸熟。
3.偷需求和技术方案： 但凡是有点体量的公司，员工在做一个需求的时候一定是要出技术方案的。这个技术方案会详细的讲他这个功能点的设计思路。
在偷技术方案的时候，我们要搞懂以下几点：
1.这个需求的产生背景是什么？这个需求开发完了之后能带来什么提升？能不能找到对应的PRD？
2.这个需求的技术选型是怎么做的？为什么在这里用了A技术？除了A技术之外自己能不能思考一下是否可以用其他的技术写出来？那么做这个需求的员工使用A技术的原因是什么？（方案调研+技术选型）
3.这个需求的对应PR有吗？能不能找到具体的代码。自己要细看一遍代码。
一定要记得：挖到好的东西和同组的实习生分享，你不可能对所有的东西都了解。因此和同组的实习生要尽快建立起来互帮互助的关系。
技术是聊出来的！
4.关注于线上事故以及对应的解决方案： 如果去大公司实习过的同学肯定知道：这些大公司看起来光鲜亮丽，其实内部事故还是经常有滴。因此多学一学这些内部事故的解决思路。
一般来讲大家遇到线上事故之后都会写复盘文档的。可以看一看这些复盘文档。从复盘文档中侧重学习两个东西：
1.是什么操作引起了这个线上事故？
2.当线上事故发生了之后，事故负责人是如何解决的？解决不仅仅包括事后对于相关代码的修改，更包括当这个事故发生在线上的时候，线上的处理方法是什么？


如果大家的公司文档比较完善的话，就直接把各种常见八股的真实解决方案都偷了


技术评审会议全部挂着，听了就是参与，说话了就是深度参与，文档看懂了就是设计并开发，如果改了文档那就是独立设计并实现

先有业务需求，再用技术去解决问题，这种思维的转变很重要，因为真实的企业开发就是这样的。
觉得项目学习最好是分阶段进行，每个阶段有明确的目标。第一阶段就是把基本架构搭建起来，能够实现最基本的增删改查功能。这个阶段主要是熟悉 Spring Boot 的项目结构，理解 Controller、Service、DAO 这种分层设计的思路，把前后端联调跑通。
第二阶段是实现核心的业务流程。这个时候要开始考虑业务逻辑的复杂性，比如订单创建的时候需要检查库存、计算价格、扣减库存、发送通知等多个步骤，这就涉及到事务管理、异常处理、服务间的协调等问题。通过实现这些复杂的业务流程，我们会对企业级开发的复杂性有更深的理解。
第三阶段是性能优化和系统完善。这个时候你已经有了一个能跑的系统，开始考虑如何让它跑得更好。比如发现某些查询很慢，就引入缓存；发现接口响应时间长，就进行 SQL 优化；发现系统缺乏监控，就加上日志和指标统计。这个阶段很重要，因为它让你的项目从玩具级别提升到了接近生产级别。


在项目学习过程中，要注意技术深度和广度的平衡。广度是指你要了解现代 Java 开发的完整技术栈，从前端到后端，从数据库到缓存，从消息队列到监控，至少要知道每个组件的作用和基本用法。但是深度也很重要，对于核心的技术比如 Spring、MyBatis，你要理解它们的底层原理，知道为什么要这样设计，有什么优缺点。
从实习准备的角度来说，我建议是广度优先，但在几个核心技术上要有一定的深度。比如 Spring IOC 和 AOP 的原理要理解，MySQL 的索引优化要会做，Redis 的数据结构选择要掌握。
项目做完了，如何包装和展示也很重要。很多球友的项目其实做得不错，但是简历上写得很平淡，面试的时候也讲不出亮点。我觉得关键是要从业务价值的角度去描述你的项目，而不是单纯地列举用了哪些技术。比如说，你不要说"项目中使用了 Redis 缓存"，而要说"通过引入 Redis 缓存，将商品查询接口的响应时间从 500ms 优化到 50ms"。
另外，要准备一些具体的数据来支撑你的描述。比如你的系统能支持多少并发用户，接口的平均响应时间是多少，缓存的命中率有多高等等。这些量化的指标会让你的项目显得更专业，更有说服力。同时，也要准备一些遇到问题和解决问题的故事，这能很好地展示你的问题解决能力。
我建议在项目完成后，写一个详细的技术总结文档，梳理一下你在这个项目中用到的技术、遇到的问题、解决的方案、学到的经验。这个过程不仅能帮你巩固知识，也能为面试做好准备。记住，企业招聘实习生，看重的不是你现在有多厉害，而是你的学习能力和成长潜力。一个完整的项目经历，恰好能很好地证明这一点。
能说清楚实习经历的背景、问题调研的过程、克服的困难以及最终实现的效果，那么面试官就会认为我干过，因为实际工作中我的这套流程就是工作流程，这要是在任何一家公司都能学到的



